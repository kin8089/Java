1. build.gradle -> 종속 추가

    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'
    implementation 'androidx.lifecyle:lifecycle-extensions:2.2.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:5.0.0-alpha.2'

-> sync 진행


2. Retrofit 인스턴스파일 생성 (url 사용)

public static String BASE_URL = "gorest.co.in/public-api/"

로그인 시 엑세스 토큰이 필요하면 url로 넘겨줄때 토큰도 같이 넘겨야 api 호출이 가능
private static Retrofit retrofit;

public static Retrofit getRetrofitInstance() {

요청 url 응답과 같은 로그를 출력 -> 종속에 추가한 logging을 호출
	HttpLogging~ interceptor = new Http~;
	interceptor.setLevel(Http~.Level.BODY);
	OkHttpCilent = new okHttp~.Builder().addInterceptor(interceptor).build();
	

	if(retrofit == null) {
		retrofit = new Retrofit.Builder()
			.baseUrl(BASE_URL)
			.client(client)
			.addCon~(Gson~.create())
			.build();
}
 	}


 
3. 활성화를 위한 인터페이스 작성

RetrofitService(인터페이스)


Retrofit : http통신을 위한 라이브러리 (POST , GET, PUT, PATCH) 4가지 명령을 통해 
	서버와 통신을 한다.

해당 인터페이스에서 http통신을 할때 사용할 4가지 명령어를 작성

@ = 어노테이션

@명령어

ex) 엑세스 토큰을 서버로 전송하기 위한 POST 명령어 작성

Call : 반환 유형으로 호출에 대한 응답 유형

서버에 전달하기 위해 본문에 정의한 매개변수를 Call함수의 매개변수로 입력

명령어('url') -> base_url 에서 해당 명령어가 서버로 전달되면 지정한 url로 이동하여
	       명령을 실행함 -> base = k.com / url = user  --> k.com/user


@POST('users')
@Headers({"Accept:application/json", "Content-Type:application/json"},
	"Authorization: bearer 포털에서 복사한 엑세스토큰")
Call<UserResponse> createUser(@Body User prams);


User : 서버로 전달할 데이터를 지정할 클래스를 생성해야한다
User 클래스를 정의했으면 이에 응답할 새로운 클래스가 필요하다
Model 클래스 생성 -> Call 에 집어넣기


4. User.java

서버에서 지정한 데이터를 넘겨줘야 한다

ex) 로그인 시 username / password -> 같은 이름으로 해줘야함 ***** 다르면 오류

private String id;
private String name;
private String email;
private String status;
private String gender;


public User(지정한 객체들 매개변수로 지정){
this.id = id;
.
.
}

해당 클래스에 대한 getter setter 생성


5. UserResponse -> 요청에 대한 서버의 응답

private int code;
private String meta;
private User data;

https://gorest.co.in/public/v1/users/111
User 클래스에서 해당 API 주소의 값을 따옴

해당 클래스에 대한 생성자 및 게터 세터 불러오기

public UserResponse(객체들) {
this~
.
.
}

getter 

setter


4 , 5번에서 생성한 클래스를 

Call<UserResponse> createUser(@Body User prams);

다음과 같이 인터페이스의 Call 함수에 넣어주면 설정이 끝남

Activity(뷰 + 동작) 구현 


6. MainActivityViewModel extends ViewModel {
	
	private MutableLiveData<UserResponse> createNewUserLiveData;
사용자 응답 유형인 라이브 데이터 정의


클래스에 대한 생성자 
	public MainActivity~() {
정의한 라이브데이터 생성
	CreateNewUserLiveData = new MutableLiveData<>();
}

	public private MutableLiveData<UserResponse> getCreateUserObserve(){
변경 가능한 라이브 데이터를 반환하는 별도의 함수 지정
api 호출

	public void createNewUser(User user) {
		RetroService retroService = RetroInstance.getRetroInstance.create(
					RetroService.class)
	Call<UserResponse> call = retroService.createUser(user);
	call.enqueue(new Callback)

	if(response.isSuccesful()){
	실행 할 명령
	createNewUserLiveData.postValue(response.body());
	}else {
	실패 시 명령
	createNewUserLiveData.postValue(response.null);
	}

}
}
}


7. MainActivity - html


에디트 텍스트 (이메일)

에디트 텍스트 (패스워드)

버튼 (회원가입)


8. MainActivity 

기본설정 진행

btn.setOnClick~

버튼 클릭 시 함수 정의

private void createNewUser() {
	String name = find~.getText().toString();
	String email = find~.getText().toString();
	User user = new User(name, email -> 지정한 내용들을 다 넣어줌)
 	viewModel.createNewUser(user);
}

private void initViewMode() {
	viewModel = new ViewModelProvider(this).get(MainActivityViewMode.class);
	viewModel.getCreateUserObserver().observe(this, new Ob~);

		if(userResponse == null) {
			Toast.makeText(MainActivity.this, ~)
		}else{
			Toast.~~
	}
}

private ManinActivityViewModel viewModel 맨 위에 전역으로 정의


manifest -> 인터넷 권한 주기