Tools -> firebase -> Authentication , Realtime Database 를 불러온다

로그인, 회원가입 액티비티를 생성하고 xml파일을 수정한다


RegisterActivity.java

-> 회원가입 화면

입력창과 버튼을 선언

private FirebaseAuth mfirebaseAuth;  // 파이어베이스 인증
private DatabaseReference mDatabaseref; // 실시간 데이터베이스

-> 불러온 파이어베이스를 사용하기 위한 변수들을 생성한다


mfirebaseAuth = FirebaseAuth.getInstance();
mDatabaseref = FirebaseDatabase.getInstance().getReference();

-> 생성한 변수에 파이어베이스를 연동한다



Firebase Auth (인증 절차 진행)

mfirebaseAuth.createUserWithEmailAndPassword(strEmail, strPwd).addOnCompleteListener(RegisterActivity.this, new OnCompleteListener<AuthResult>() {
                    @Override
                    public void onComplete(@NonNull Task<AuthResult> task) {

                        if(task.isSuccessful()) {
                            FirebaseUser firebaseUser = mfirebaseAuth.getCurrentUser();
                        }
                    }
                });


-> 파이어베이스 어스에 이미 생성된 메소드를 불러온다(선언한 이메일, 패스워드 변수로 넣음)
    
.addOnCompleteListener -> 가입이 완료되면(현재 액티비티.this, On~

task = 회원가입의 성공여부

task.isSuccessful() 메소드를 통해 if문을 구성한다



UserAccount 자바 클래스 생성

-> 정보를 받을 형식인 String emailId, password;

public UserAccount() { }

-> 파이어베이스는 빈 생성자를 선언해줘야 한다


alt + insert로 게터 세터함수를 불러온다



다시 레지스터 액티비티

                            account.setIdToken(firebaseUser.getUid());
                            account.setEmailId(firebaseUser.getEmail());
                            account.setPassword(strPwd);

if 문안에 추가


데이터베이스 호출했을 때 .getReference("firebase"); 

-> 앱 이름 변수로 입력