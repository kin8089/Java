OkHttpClient : 

REST API, HTTP 통신을 간편하게 구현할 수 있는 라이브러리
Retrofit의 베이스가 됨

OkHttp 요청을 전송할 OkHttpClient 객체가 필요함

GET = GET 요청을 Requset.Builder를 통해 만듬 -> REST API 요청을 전송할 URL과
get() 메소드를 사용하여 GET요청임을 명시


POST = 기본적으로 GET과 비슷한 방식
RequestBody 객체에 전달할 Body의 내용과 컨텐츠 타입(JSon)이 추가 됨


동기 요청 : client.newCall(request).execute() 로 실행


--------------------------------------------------------------------------------------


비동기 요청 : enqueue() 메소드를 사용 -> 인자로 Callback을 넘겨주면 요청을 전송
Request가 성공적으로 응답을 받으면 onResponse()메소드가 호출
예외가 발생하면 onFailure() 메소드가 호출됨



OkHttpClient는 Retrofit의 베이스를 깔아주기 때문에 java클래스 파일을 만들어
정의를 해줌

users 앱에서는 ApiClient 파일에 정의를 해주었다.


HttpLoggingInterceptor : 앱 실행과정에서 로그를 남기기 위해 사용하는 메소드

-- 사용 코드

   HttpLoggingInterceptor httpLoggingInterceptor = new HttpLoggingInterceptor();
        httpLoggingInterceptor.setLevel(HttpLoggingInterceptor.Level.BODY);

        OkHttpClient okHttpClient = new OkHttpClient.Builder().addInterceptor(httpLoggingInterceptor).build();


Retrofit 객체를 생성하여 bulid를 진행한다
이때 여기서 베이스 url과 client(okHttpClient)를 지정해주고 return으로 retrofit을 지정


--------------------------------------------------------------------------------------------


로그인과 회원가입에는 각각 Request(요청)과 Response(응답)의 형식을 지정해주는
자바 파일을 생성한다.

Request는 클라이언트(앱) -> 서버로 보내는 내용들을 선언하고 get&set 함수를 선언한다
이때 지정하는 내용들은 서버에 있는 필드와 동일해야 오류가 발생하지 않는다


Response는 서버에서 클라이언트에서 요청을 받았을때 정상적으로 작동을 했을때 
보내주는 응답임 서버에 지정된 Response 형식에 따라서 지정해야 한다
마찬가지로 게터세터 함수를 선언


Serializable :
직렬화, 자바 내부에서 사용되는 객체 또는 데이터를 외부의 자바 시스템에서도
사용할 수 있도록 바이트(byte)형태로 데이터를 변환하는 기술

implements 로 상속만 받으면 자동으로 직렬화가 처리됨

조건

- 직렬화 class 는 송신, 수신 모두 동일해야 한다.

- 직렬화 class 의 패키지 명이 같아야 한다.

- serialVersionUID 가 같아야 한다.


------------------------------------------------------------------------------------------

call은 일반적으로 retrofit을 사용하여 서버로부터 응답을 받을 때 사용되는 기본 방법


기존처럼 객체를 생성해서 바로 필드로 넘겨주는것이 아닌 
클래스를 선언하고 그 안에 set 메소드를 통해서 변수들을 넘겨주고 사용