몽고 DB 설치 {
mongodb.com 의 Community Server 

위 사이트의 products 목록에서 Community Server 로 들어가서 다운로드 받으면 됨. 5.0.6(current) 버전 받으면 됨.

다운받은거 우클릭 하고 호환성  next , accept, next , 체크박스가 선택된 상태에서 next 를 누르고 back 하고 
체크박스 해제 하고 next (그 다음 체크박스는 체크 된채로 next) 그냥 계속 next 하면 됨.
중간에 뭐 뜨는거 ignore 


내pc 우클릭 속성 - 고급시스템설정 - 환경변수 - 편집 - 시스템변수에서 path 를 찾아서 클릭 - 그 안에서 편집눌러서 
다음 주소 복붙  C:\Program Files\MongoDB\Server\5.0\bin

커맨드창에 mongo 쳐서 버전 나오면 된것.

c에 myMongoDB 폴더 생성
다른 cmd 창 띄워서 mongod --dbpath c:/myMongoDB
그리고 ctrl+f 로 localhost 찾아야함. 
엔터 한번 치고 아래 검색
compass 창에서 mongodb://localhost/   }

mongo 
use bitDB
로 다시 아까 작업하던고에서 작업가능

--------------------------------------------------------------------------------------------------------------------------

show dbs : 데이터베이스 조회

db : 현재 사용중인 데이터베이스 조회

use db_name 으로 데이터베이스 생성

1개 이상의 collection이 존재해야 데이터베이스 확인 가능


collection : 

db createCollection(name, [option])으로 생성

name = 이름 / option = 타입으로 구성된 해당 컬렉션 설정값

drop 컬렉션명 : 제거


db 컬렉션명.insert(document)로 document(jason) 추가 - insertOne or insertMany 사용

배열형식으로 전달하면 여러 document를 bulk형식으로 추가

db 컬렉션명.find(query, projection)로 document리스트 확인



줄이 너무 길 때는 끝에 .pretty()를 붙이면 보기 편하게 결과 출력

db.컬렉션명.deleteOne or deleteMany로 document 제거


MongoDB종료 : 몽고쉘이서 데몬 종료

use admin
db.shutdownServer()

------------------------------------------------------------------------------------------------------

table : collection

row : document(필드 , 값의 쌍으로 이루어짐)

coulmn : field

MongoDB : 기본키 설정할 필요 없어 id필드에 자동생성


select * from =  .find()

특정 값만 출력 : projection (출력값은 1, 제외할 값은 0으로 설정)


>= : gt(great than)     /     <= : lte(less than)

regex : 정규식 (문자 찾을때)

order by : sort (asc = 1 / dese = -1)

count : count() 

limit0 : 지정 개수만큼 출력

explain() : 인덱스 설명

update : updateOne or updateMany

inc : increase (증가)



---------------------------------------------------------------------------------------------------

indexing

for(i=0; i<500000; i++){
	db.user.insert({
	"user" : i,
	"name" : "user"+i,
	"age" : Math.floor(Math.random()*100),
	"score" : Math.floor(Math.random()*100),
	"time" : new Date()
});
}


index : query를 더욱 효율적으로 할 수 있도록 document에 기준(key)을 정해 정렬된 목록을 생성

몽고디비 인덱스 : 검색을 빠르게 하기 위해 데이터의 순서를 정하는 과정

고정된 스키마는 없지만 원하는 필드를 인덱스로 지정

한 쿼리에 한 개의 인덱스만 유효함 - 여려개의 인덱스가 필요하면 복합 인덱스를 사용

_id 인덱스 : 컬렉션을 생성하는 동안 _id필드에 고유한 인덱스 생성

_id인덱스는 제거 불가

인덱스 생성 : db.collection.createIndex(<key and index type specification>, <option>)

ex) {item :1 , quantity : -1}

샘플 데이터 생성하기

db.user.createIndex({score : 1})


db.user.getIndexes() : 인덱스 정보 출력

db.user.dropIndex("score_1")


인덱스 유무 속도 비교

db.user.find({score : "23"}).explain("executionStats").executionStats.executionTimeMillis


db.user.find{"name : "user101"}).expain("executionStats")
{
	"queryPlanner" : {
	"namespace" : "test.user",
	"indexFilterSet" : false,
	"parsedQuery" : {
	"name" : {
	"$eq" : "user101"
	}
}


복합인덱스 : 두 개 이상의 필드를 사용하는 인덱스

db.collection.createIndex( { <field1> : <type>, <field2> : <type> , ... } )

db.user.createIndex( {user :1 , score :-1})


연습문제

값을 1로하면 오름차순으로, -1로 하면 내림차순으로 정렬합니다.


db.user.find({user:20300}) : 260 / 225

db.user.createIndex({user :-1})

db.user.find({score:53}) : 225  / 0

db.user.createIndex({score :1})

db.user.find({user:{gt:3333}}) : 224  / 219
 
db.user.createIndex({user :-1})

db.user.find({user:1111}).sort({score :1}) : 229  / 227

db.user.createIndex({user :1, score : 1})

db.user.find({user:1222, score:{$gt:22}}) : 230  / 224

db.user.createIndex({user :1, score : 1})

db.user.find({score:{$gt:22},age : 22}) : 229  / 223

db.user.createIndex({user :1, score : 1})


-----------------------------------------------------------------------------------------------

연습문제 1

db.student.insertOne({std_name : "Jack" , sex : "Male" , class :6, age : 11, grd_point:33})


db.student.insertOne({std_name : "Jenny" , sex : "Female" , class :6, age : 13, grd_point:30})

db.student.insertOne({std_name : "Thormas" , sex : "Male" , class :5, age : 11, grd_point:35.1257})

db.student.insertOne({std_name : "Lassy" , sex : "Female" , class :10, age : 17, grd_point:36.2514})

db.student.insertOne({std_name : "Mia" , sex : "Male" , class :10, age : 19, grd_point:35.5201})

db.student.insertOne({std_name : "Mike" , sex : "Male" , class :5, age : 16, grd_point:35.5201})



db.student.insertMany([{std_name : "Jack" , sex : "Male" , class :6, age : 11, grd_point:33},
		{std_name : "Jenny" , sex : "Female" , class :6, age : 13, grd_point:30},
		{std_name : "Thormas" , sex : "Male" , class :5, age : 11, grd_point:35.1257},
		{std_name : "Lassy" , sex : "Female" , class :10, age : 17, grd_point:36.2514},
		{std_name : "Mia" , sex : "Male" , class :10, age : 19, grd_point:35.5201},
		{std_name : "Mike" , sex : "Male" , class :5, age : 16, grd_point:35.5201}])


db.student.find({class : 6 , sex : "Female"})

db.student.find({sex : "Female" , grd_point : {$gte : 31} , class : 10})

--------------------------------------------------------------------------------------------------------

연습문제 2

db.student.updateOne({"grd_point" : 303}, {"$set" : {"grd_point" : 303}})
db.student.updateOne({"grd_point" : 30}, {"$set" : {"grd_point" : 800}})
db.student.updateOne({"grd_point" : 35.1257}, {"$set" : {"grd_point" : 200}}) 
db.student.updateOne({"grd_point" : 36.2514}, {"$set" : {"grd_point" : 550}})
db.student.updateOne({"std_name" : "Mia"}, {"$set" : {"grd_point" : 350}})
db.student.updateOne({"std_name" : "Mike"}, {"$set" : {"grd_point" : 700}})

db.student.updateMany({}, {$rename : {"grd_point" : "Total_marks"}})

db.student.updateOne({"std_name" : "Jack"}, {$set : {Result : "Pass"}})
db.student.updateOne({"std_name" : "Jenny"}, {$set : {Result : "Pass"}})
db.student.updateOne({"std_name" : "Thormas"}, {$set : {Result : "Fail"}})
db.student.updateOne({"std_name" : "Lassy"}, {$set : {Result : "Pass"}})
db.student.updateOne({"std_name" : "Mia"}, {$set : {Result : "Pass"}})
db.student.updateOne({"std_name" : "Mike"}, {$set : {Result : "Pass"}})

db.student.find({Total_marks : {$gte:400}})

db.student.find({$not : [{"age":11}]})


--------------------------------------------------------------------------------------------------------

연습문제 3

db.student1.insertOne({
   "name" : "Mick",  
   "Course" : "btech",  
   "batch_year" : 2018,  
   "language" : ["c++", "java", "python"],  
   "personal_details" :
 { "Father_name" : "Jonny",  
   "phone_no" : 8895321456,  
   "age" : 23,  
   "gender" : "Male",  
   "City" : "NewYork" }})

db.student1.insertOne({  
           "name" : "Zoya",  
           "Course" : "BCA",  
           "batch_year" : 2020,  
           "language" : ["C#", "JavaScript"],  
           "personal_details" :   
                     {  
                      "Father_name" : "Henry",  
                      "phone_no" : 9874563698,  
                      "age" : 20,  
                      "gender" : "Female",  
                      "City" : "London",  
                     }})

db.student1.insertOne({  
           "name" : "Jonny",  
           "Course" : "MCA",  
           "batch_year" : 2019,  
           "language" : ["C#", "java", "PHP"],  
           "personal_details" :   
                     {  
                      "Father_name" : "Thomas",  
                      "phone_no" : 7845123698,  
                      "age" : 24,  
                      "gender" : "Male",  
                      "City" : "London",  
                     }})           
 
db.student1.insertOne({  
           "name" : "Oliver",  
           "Course" : "BA",  
           "batch_year" : 2017,  
           "language" : ["c", "PHP"],  
           "personal_details" :   
                     {  
                      "Father_name" : "William",  
                      "phone_no" : 9997845123,  
                      "age" : 25,  
                      "gender" : "Male",  
                      "City" : "Liverpool",  
                     }})           

db.student1.insertOne({  
           "name" : "Mia",  
           "Course" : "btech",  
           "batch_year" : 2020,  
           "language" : ["HTML", "CSS", "PHP"],  
           "personal_details" :   
                     {  
                      "Father_name" : "Leo",  
                      "phone_no" : 6312547896,  
                      "age" : 22,  
                      "gender" : "Female",  
                      "City" : "Manchester",  
                     }})       


db.student1.find({$or : [ { "Course" : "MICA" } , {"batch_year" : 2018}]}) 

db.student1.find({$or : [ {"age" : 20} ,  {"City" : "London"}]})

db.student1.find({$or : [ {"language" : {"$in" : ["C++" , "java", "python"]}}]})

db.student1.find({"City" : "London"})

----------------------------------------------------------------------------------------------------

연습문제 4 

db.student1.updateOne({"name" : "Mick"},{$set : {"pending_fees" : 12000}})

db.student1.updateOne({"name" : "Zoya"},{$set : {"pending_fees" : 12000}})

db.student1.updateOne({"name" : "Mia"},{$set : {"pending_fees" : 12000}})


db.student1.find({$nor : [ {"City" : "London"} , {"age" : 22}]})


db.student1.find().limit(3)

------------------------------------------------------------------------------------------------------

텍스트 인덱스 : 제목, 설명 등 컬렉션 내에 있는 필드의 텍스트와 일치시키는 키워드 검색에 사용

db.library.insertMany([
	{ "_id" : 101, "name" : "Java", "description" : "By ABC" },
	{_id : 102, name : "MongoDB", description : "By XYZ"},
	{_id : 103, name : "Python", description : "By ABCD"},
	{_id : 104, name : "Engineering", description : "By *******"},
	{_id : 105, name : "Salesforce", description : "By Salesforce"}
])

db.library.find({$text : {$search : "Java"}})

db.library.find({$text : {$search : "\Java Book\"}})

-----------------------------------------------------------------------------------------------------

$ mongoimport <path to neigborthoods.json> -c neigborhoods
$ mongoimport <path to restaurants.json> -c restaurants


C:\Users\BIT>cd C:\temp

mongoimport n + tap -c neigborhoods

mongoimport restaurants.json -c restaurants

db.neighborhoods.createIndex({location : "2dsphere"})

db.restaurants.createIndex({location : "2dsphere"})

db.neighborhoods.find({name: "Clinton"})

db.restaurants.find({name : "Little Pie Company"})

db.neighborhoods.findOne({geometry:{$geoIntersects:{$geometry:{type: "Point", coordinates:[-73.93414657,40.82302903]}}}})

var neigborhoods = db.neighborhoods.findOne({geometry:
{$geoIntersects:{$geometry:{type:"Point",coordinates:[-73.93414657,40.82302903]}}}})

db.neighborhoods.find({location: {$geoWithin: {$geometry: neigborhoods.geometry}}}, {name :1,_id: 0});

db.restaurants.find({location: {$geoWithin: {$centerSphere: [ [-73.93414657,40.82302903], 5/3963.2]}}})


https://mapshaper.org/ (경도 위도로 지도 그려줌)


echo "Hello, world" > too.text

mongofiles put too.text

mongofiles list

rm too.txt

mongofiles get too.text


