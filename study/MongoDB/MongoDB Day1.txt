db.movies.insertMany([
    {
	title: 'Titanic',
	year: 1997,
	awards:{
	  wins: 127,
	  nominations: 63,
	  text: 'Won 11 Oscars. Another 116 wins & 63 nominatioins.'
	},
	cast: ['Leonardo DiCaprio', 'Kate Winslet', 'Billy Zane', 'Kathy Bates']
         },
    {
	title: 'The Dark Knight',
	year: 2008,
	awards: {
	  wins: 144,
	  nominations: 106,
	  text: 'Won 2 Oscars. Another 142 wins & 106 nomination.'
	},
	cast: ['Chistian Bale', 'Heath Ledger', 'Aaron Eckhart', 'Michael Caine'],
	directors: ['Christopther Nolan']
         }

])

db.movies.find().pretty()

db.movies.insertOne({"title111":"aaa"})

db.movies.insertOne({
"title222" :
"bbb"
}
)

movie = {"title" : "Star Wars: Episode IV - A New Hope",
"director" : "George Lucas",
"year" : 1977}

db.movies.insertOne(movie)

db.movies.find().pretty()

db.movies.findOne()

//directors라는 key에 value값이 Christopther Nolan인 데이터를 찾을 때//
db.movies.find({"directors": "Christopther Nolan"})

//year이라는 key에 value가 1997또는 1998인 데이터를 찾을 때//
db.movies.find({"year": {$in: [1997, 1998]}})

//awards의 key안에 value가 wins라는 값이 100이상인 데이터를 찾을 때//
db.movies.find({"awards.wins":{$gt:100}})

//반환한 필드를 지정할때 1이면 포함이고 0이면 포함되지않는다.//
db.movies.find({}, {"title": 1, "directors":1, "year":1});
//Oracle에서 select title,directors,year from movies; 와 같음//

db.movies.find({}, {"_id": 0, "title": 1, "genres":1});

//데이터베이스는 하나 이상의 컬렉션을 저장함//
//데이터베이스 생성 예시//
//use bitDB//

//컬렉션 명시적 생성//
db.createCollection(name,options)
db.createCollection("log", {capped : true, size : 5242880, max: 5000})

//삭제할때//
db.log.drop()

db.movies.drop()

//insertManyEx//
db.movies.insertMany([
    
	{"title" : "Ghostbusters"},
	{"title" : "E.T."},
	{"title" : "Blade Runner"}]);
/*result
{
	"acknowledged" : true,
	"insertedIds" : [
		ObjectId("572630b11722fac4b6b4996"),
		ObjectId("572630b11722fac4b6b4997"),
		ObjectId("572630b11722fac4b6b4998")
	]
}*/

db.movies.find()
//result
{ "_id" : ObjectId("6205cc75cb7a06ca9885148b"), "title" : "Ghostbusters" }
{ "_id" : ObjectId("6205cc75cb7a06ca9885148c"), "title" : "E.T." }
{ "_id" : ObjectId("6205cc75cb7a06ca9885148d"), "title" : "Blade Runner" }//


db.movies.insertMany([
	{"_id": 0, "title" : "Top Gun"},
	{"_id": 1, "title" : "Back to the Future"},
	{"_id": 1, "title" : "Gremlins"},
	{"_id": 2, "title" : "Aliens"}])
/*result
uncaught exception: BulkWriteError({
        "writeErrors" : [
                {
                        "index" : 2,
                        "code" : 11000,
                        "errmsg" : "E11000 duplicate key error collection: bitDB.movies index: _id_ dup key: { _id: 1.0 }",
                        "op" : {
                                "_id" : 1,
                                "title" : "Gremlins"
                        }
                }
        ],
        "writeConcernErrors" : [ ],
        "nInserted" : 2,
        "nUpserted" : 0,
        "nMatched" : 0,
        "nModified" : 0,
        "nRemoved" : 0,
        "upserted" : [ ]
}) :
BulkWriteError({
        "writeErrors" : [
                {
                        "index" : 2,
                        "code" : 11000,
                        "errmsg" : "E11000 duplicate key error collection: bitDB.movies index: _id_ dup key: { _id: 1.0 }",
                        "op" : {
                                "_id" : 1,
                                "title" : "Gremlins"
                        }
                }
        ],
        "writeConcernErrors" : [ ],
        "nInserted" : 2,
        "nUpserted" : 0,
        "nMatched" : 0,
        "nModified" : 0,
        "nRemoved" : 0,
        "upserted" : [ ]
})
BulkWriteError@src/mongo/shell/bulk_api.js:371:48
BulkWriteResult/this.toError@src/mongo/shell/bulk_api.js:336:24
Bulk/this.execute@src/mongo/shell/bulk_api.js:1205:23
DBCollection.prototype.insertMany@src/mongo/shell/crud_api.js:326:5
@(shell):1:1
//
db.movies.insertMany([
	{"_id": 3, "title" : "Sixteen Candles"},
	{"_id": 4, "title" : "The Terminator"},
	{"_id": 4, "title" : "The Princess Bride"},
	{"_id": 5, "title" : "Scarface"}],
	{"ordered" : false})
//result
uncaught exception: BulkWriteError({
        "writeErrors" : [
                {
                        "index" : 2,
                        "code" : 11000,
                        "errmsg" : "E11000 duplicate key error collection: bitDB.movies index: _id_ dup key: { _id: 4.0 }",
                        "op" : {
                                "_id" : 4,
                                "title" : "The Princess Bride"
                        }
                }
        ],
        "writeConcernErrors" : [ ],
        "nInserted" : 3,
        "nUpserted" : 0,
        "nMatched" : 0,
        "nModified" : 0,
        "nRemoved" : 0,
        "upserted" : [ ]
}) :
BulkWriteError({
        "writeErrors" : [
                {
                        "index" : 2,
                        "code" : 11000,
                        "errmsg" : "E11000 duplicate key error collection: bitDB.movies index: _id_ dup key: { _id: 4.0 }",
                        "op" : {
                                "_id" : 4,
                                "title" : "The Princess Bride"
                        }
                }
        ],
        "writeConcernErrors" : [ ],
        "nInserted" : 3,
        "nUpserted" : 0,
        "nMatched" : 0,
        "nModified" : 0,
        "nRemoved" : 0,
        "upserted" : [ ]
})
BulkWriteError@src/mongo/shell/bulk_api.js:371:48
BulkWriteResult/this.toError@src/mongo/shell/bulk_api.js:336:24
Bulk/this.execute@src/mongo/shell/bulk_api.js:1205:23
DBCollection.prototype.insertMany@src/mongo/shell/crud_api.js:326:5
@(shell):1:1*/


db.inventory.insertOne(
	{ item: "canvas", qty : 100, tags : ["cotton"], size : {h:20, w:30,uom:"cm"}
	}
)

db.inventory.find({item:"canvas"})

db.inventory.insertMany([
	{item: "note", qty: 25, tags: ["blank","red"], size: {h:14,w:21,uom:"cm"}},
	{item: "mat", qty: 85, tags: ["gray"], size: {h: 28,w: 36,uom:"cm"}},
	{item: "mousepad", qty: 25, tags: ["gel","blue"], size: {h: 19,w: 23, uom:"cm"}}
])

db.inventory.find()

db.inventory.drop()

db.inventory.insertMany([
	{item:"joural", qty:25, size:{h:14, w:21, uom:"cm" }, status:"A"},
	{item:"notebook", qty:50, size:{h:9, w:11, uom:"in" }, status:"A"},
	{item:"paper", qty:100, size:{h:9, w:11, uom:"in" }, status:"D"},
	{item:"planner", qty:75, size:{h:23, w:30, uom:"cm" }, status:"D"},
	{item:"postcard", qty:45, size:{h:10, w:16, uom:"cm"}, status:"A"}
]);

//동등비교//
db.inventory.find({status:"D"})

//and조건//
db.inventory.find({status:"A", qty:{$It:30}})
//select * from where status = "A' and qty<30;와 같다.//

//or조건//
db.inventory.find({$or:[{status:"A"},{qty:{$It:30}}]})
//select * from where status = "A" or qty<30;와 같다.//

//and와 or조건 같이사용//
db.inventory.find({
status: "A",
$or: [ { qty:{$lt:30} }, { item: /^p/} ]
})
//select * from inventory where status = "A" and (qty<30 or item like "p%");와 같다//

//내장 도큐먼트의 필드에 대한 동등조건 지정//
db.inventory.find(
{size: {h: 14, w:21, uom:"cm"} }
 )

//Nested field에 대해 동등 비교 조건 지정하기//
db.inventory.find(
{"size.uom": "in"}
)

//Query selector를 이용한 조건 지정하기//
--(size가 h인것중에 15보다 작은것을 찾는다.)
db.inventory.find(
{"size.h": {$lt: 15} }
)

//and조건 지정하기//
db.inventory.find(
{"size.h" : {$lt:15},
"size.uom" : "in",
status : "D" }
)

//inventory 컬렉션 삭제 후 새로 삽입//
db.inventory.insertMany([
	{item:"joural", qty:25, tags: ["blank", "red"], dim_cm : [14,21]},
	{item:"notebook", qty:50, tags: ["red", "blank"], dim_cm : [14,21]},
	{item:"paper", qty:100, tags: ["red","blank", "plain"], dim_cm : [14,21]},
	{item:"planner", qty:75, tags: ["blank", "red"], dim_cm : [23,30]},
	{item:"postcard", qty:45, tags: ["blue"], dim_cm : [10,15]}
]);

//값이 정확하게 일치하는 경우 찾기//
db.inventory.find(
{tags: ["red", "blank"] }
)

//값을 포함하고 있는 요소들 조회하기//
db.inventory.find(
{tags: {$all: ["red", "blank"]} }
)

//배열 필드에 지정된 값을 가진 요소가 하나 이상 있는지 조회//
//배열형식으로 되어있는 필드의 값을 배열형식으로 안찾아주면 해당값이 들어있는 모든 필드가 찾아진다.//
db.inventory.find(
{tags: "red"}
)

//Query operator를 사용하기(Query selector)//
db.inventory.find(
{dim_cm: {$gt:25} }
)
//result
{ "_id" : ObjectId("6205fd5acb7a06ca988514a4"), "item" : "planner", "qty" : 75, "tags" : [ "blank", "red" ], "dim_cm" : [ 23, 30 ] }//

//여러 조건 지정하기//
db.inventory.find(
{dim_cm: {$gt: 15, $lt:20} }
)
/*result
{ "_id" : ObjectId("6205fd5acb7a06ca988514a1"), "item" : "joural", "qty" : 25, "tags" : [ "blank", "red" ], "dim_cm" : [ 14, 21 ] }
{ "_id" : ObjectId("6205fd5acb7a06ca988514a2"), "item" : "notebook", "qty" : 50, "tags" : [ "red", "blank" ], "dim_cm" : [ 14, 21 ] }
{ "_id" : ObjectId("6205fd5acb7a06ca988514a3"), "item" : "paper", "qty" : 100, "tags" : [ "red", "blank", "plain" ], "dim_cm" : [ 14, 21 ] }*/

//여러 조건을 만족하는 배열 요소 쿼리($elemMatch)//
//지정된 조건을 모두 충족하는 배열 요소 쿼리//
db.inventory.find(
{dim_cm: {$elemMatch: {$gt:22, $lt:30} } }
)

//배열 인덱스로 쿼리 (인덱스는 0부터 시작)//
db.inventory.find(
{"dim_cm.1" : {$gt:30} }
)

//배열의 길이(크기)로 쿼리 ($size)//
db.inventory.find(
{"tags" : {$size: 3} }
)

//내장 도큐먼트 배열 쿼리 (inventory 컬렉션 삭제 후 재생성)//
db.inventory.insertMany([
{item:"journal", instock: [ {warehouse: "A", qty:5}, {warehouse: "C", qty:15}] },
{item:"notebook", instock: [ {warehouse: "C", qty:5}] },
{item:"paper", instock: [ {warehouse: "A", qty:60}, {warehouse: "B", qty:15}] },
{item:"planner", instock: [ {warehouse: "A", qty:40}, {warehouse: "B", qty:5}] },
{item:"postcard", instock: [ {warehouse: "B", qty:15}, {warehouse: "C", qty:35}] }
]);

//배열 내부의 도큐먼트 쿼리//
db.inventory.find(
{"instock": {warehouse: "A", qty:5} }
)

//도큐먼트 배열에 포함된 필드에 조건 지정하기//
//lte (<=)사용//
db.inventory.find(
{"instock.qty": {$lte: 20} }
)

//배열 인덱스로 내장 도큐먼트에서 쿼리하기//
db.inventory.find(
{"instock.0.qty": {$lte:20} }
)
/*result
{ "_id" : ObjectId("620600e5cb7a06ca988514ab"), "item" : "journal", "instock" : [ { "warehouse" : "A", "qty" : 5 }, { "warehouse" : "C", "qty" : 15 } ] }
{ "_id" : ObjectId("620600e5cb7a06ca988514ac"), "item" : "notebook", "instock" : [ { "warehouse" : "C", "qty" : 5 } ] }
{ "_id" : ObjectId("620600e5cb7a06ca988514af"), "item" : "postcard", "instock" : [ { "warehouse" : "B", "qty" : 15 }, { "warehouse" : "C", "qty" : 35 } ] }*/

//$elemMatch를 이용한 다중 조건 지정하기//
db.inventory.find(
{"instock": {$elemMatch: {qty: {$gt:10, $lte:20} } } }
)

//------프로젝션연습-------//
db.inventory.insertMany([
{item:"journal", status: "A", size: {h:14,w:21,uom:"cm"}, instock:[{warehouse: "A", qty: 5}] },
{item:"notebook", status: "A", size: {h:9,w:11,uom:"in"}, instock:[{warehouse: "C", qty: 5}] },
{item:"paper", status: "D", size: {h:9,w:11,uom:"in"}, instock:[{warehouse: "A", qty: 60}] },
{item:"planner", status: "D", size: {h:23,w:30,uom:"cm"}, instock:[{warehouse: "A", qty: 40}] },
{item:"postcard", status: "A", size: {h:10,w:16,uom:"cm"}, instock:[{warehouse: "B", qty: 15},{warehouse: "C", qty: 35}  ] }
]);

//특정필드들 조회하기//
db.inventory.find(
{ status: "A"},
{ item: 1, status:1 }
)
--select item,status from inventory where status = 'A';

//특정 필드들 제외시키기//
db.inventory.find(
{status: "A"},
{status:0, instock:0}
)

//내장도큐먼트의 특정 필드 반환//
db.inventory.find(
{status: "A"},
{item: 1, status: 1, "size.uom": 1}
)

// 내장 도큐먼트의 특정 필드 제외시키기 //
db.inventory.find(
{status: "A"},
{"size.uom":0}
)

// 배열 내의 내장 도큐먼트 프로젝션 //
db.inventory.find(
{status: "A"},
{item: 1, status: 1, "instock.qty": 1}
)

//null 또는 존재하지 않는 필드 쿼리//
//inventory 컬렉션 삭제 후 새로 삽입//
db.inventory.insertMany([
{_id: 1, item: null},
{_id: 2}
])

//item 필드가 null이거나 없는 경우 쿼리//
db.inventory.find(
{item: null}
)

//필드를 포함하지 않는 도큐먼트 쿼리//
db.inventory.find(
{item: {$exists: false} }
)

//inventory 컬렉션 삭제 후 새로 삽입//
db.inventory.insertMany( [
{ item: "canvas", qty: 100, size: { h: 28, w: 35.5, uom: "cm" }, status: "A" },
{ item: "journal", qty: 25, size: { h: 14, w: 21, uom: "cm" }, status: "A" },
{ item: "mat", qty: 85, size: { h: 27.9, w: 35.5, uom: "cm" }, status: "A" },
{ item: "mousepad", qty: 25, size: { h: 19, w: 22.85, uom: "cm" }, status: "P" },
{ item: "notebook", qty: 50, size: { h: 8.5, w: 11, uom: "in" }, status: "P" },
{ item: "paper", qty: 100, size: { h: 8.5, w: 11, uom: "in" }, status: "D" },
{ item: "planner", qty: 75, size: { h: 22.85, w: 30, uom: "cm" }, status: "D" },
{ item: "postcard", qty: 45, size: { h: 10, w: 15.25, uom: "cm" }, status: "A" },
{ item: "sketchbook", qty: 80, size: { h: 14, w: 21, uom: "cm" }, status: "A" },
{ item: "sketch pad", qty: 95, size: { h: 22.85, w: 30.5, uom: "cm" }, status: "A" }
] );

//필드 값을 $set과 같은 갱신 연산자를 이용하여 수정하기//
db.inventory.updateOne(
{item: "paper"},
{
  $set: {"size.uom": "cm", status: "P"},
  $currentDate: {lastModified: true}
 }
)

//여러 도큐먼트 갱신하기//
db.inventory.updateMany(
{"qty": {$lt: 50} },
{
  $set: {"size.uom" : "in", status: "P"},
  $currentDate : {lastModified: true}
}
)

//replace를 통해서 갱신하기//
//이전꺼 확인//
db.inventory.find(
{item: "paper"}
)

//갱신//
db.inventory.replaceOne(
{item: "paper"},
{item: "paper", instock: [{warehouse: "A", qty: 60}, {warehouse: "B",qty:40}] }
)

//갱신후 확인//
db.inventory.find(
{item: "paper"}
)

db.movies.deleteOne(
{"_id" : 3}
)

db.movies.deleteMany(
{"year" : 1984}
)

//page69 //
var joe = db.users.findOne(
{"name" : "joe"}
)

joe.relationships = {"friends" : joe.friends, "enemies" : joe.enemies}

joe.username = joe.name;

db.users.replaceOne(
{"name" : "joe"},
joe
)

delete joe.friends;
delete joe.enemies;
delete joe.name;

db.users.replaceOne(
{"name" : "joe"},
joe
)

db.users.find().pretty()

//page 70//
joe = db.users.findOne(
{"name" : "joe", "age" : 20}
)

joe.age++;

/*db.users.replaceOne(
{"name" : "joe"},
joe
)//에러*/

db.users.replaceOne(
{"_id" : ObjectId("62061d8c31699986b6085dec")},
joe
)

db.users.find(
{"name" : "joe"}
)

//page 71//
//pageviews 키와 그에따른 value는 compass에서 삽입//

db.pageviews.updateOne(
{"url" : "www.example.com"},
{"$inc" : {"pageviews" : 1}}
)

db.pageviews.find().pretty()

db.pageviews.insertMany([
{"url" : "www.example.com","pageviews" : 54},
{"url" : "www.example.com","pageviews" : 100}
])