기본 타입 : 실제 값을 변수 안에 저장

참조 타입 : 객체의 번지를 참조(주소를 통해 객체 참조)


메모리 

1. 정적 영영 static

2. 힙 영역 : 프로그램을 실행할 때, 동적으로 확보하기 위한 메모리 영역
객체가 생성되면 힙에 저장됨. 안쓰는 객체는 가비지 컬렉터가 자동으로 제거

3. 스택 영역

스택 : 데이터의 입구와 출구가 1개임. 입력, 출력이 동시에 일어나지 않음.

최근에 들어온 데이터부터 꺼낼 수 있음

ex) int[] scores = {10,20,30};

배열변수 scores는 스택영역에 저장. scores의 인덱스 10,20,30은 힙영역에 저장됨

scores : 스택 영역

10,20,30 : 힙 영역


== : 동일한 객체인지 해당 객체의 주소(힙 영역)를 비교

------------------------------------------------------------------------------------------

String 타입 : 객체. 문자열을 저장하는 클래스 타입

new 연산자 : 객체 생성
새로운 객체를 힙 영역에 생성.

ex) String string1 = new String("신")
    String string 2 = new String("신")

string1 == string2 : false

https://docs.oracle.com/javase/8/docs/api/

------------------------------------------------------------------------------------------

배열 : 참조 타입

int [] Array;       or        int Array[]; 

배열 변수는 참고할 배열 객체가 없다면 null값으로 초기화 가능



*** ctrl A + ctrl I : 전체 들여쓰기 정렬


객체를 참조하는 배열 

참조 타입 배열 : 각 항목에 객체의 번지를 가짐

-------------------------------------------------------------------------------------------

클래스 : 

클래스 구성 멤버 : 필드 , 생성자 , 메소드

필드 = 객체의 데이터

생성자 = 객체 생성 시 초기화 역할 담당. 메소드. 클래스 이름과 동일

메소드 = 객체의 동작에 해당하는 실행 블록(파이썬 함수)


--------------------------------------------------------------------------------------------

public class Employee {
	String name;
	String tel;
	long sal = 0;
	
	Employee() { 
		this("", "", 0);
	}
	Employee(String name) {
		this(name, "", 0);
	}
	Employee(String name, String tel) {
		this(name, tel, 0);
	}
	Employee(String name, String tel, long sal) {
		this.name = name;
		this.tel = tel;
		this.sal = sal;
	}
	
	void upSalary(double amt) {
		sal = sal + (int) (sal * amt);
		printInfo();
	}




import java.util.Scanner;
public class Test {
	public static void main(String[] args) {
		Scanner scan = new Scanner(System.in);
		String name;
		String tel;
		long sal;
		double amt;

		Scanner sc = new Scanner(System.in); 
		System.out.print("이름을 입력하세요: ");
		name = scan.nextLine();
		System.out.print("전화번호를 입력하세요: ");
		tel = scan.next();
		System.out.print("연봉을 입력하세요: ");
		sal = scan.nextLong();
		Employee em = new Employee(name, tel, sal);
		em.printInfo();

		System.out.print("급여의 인상율은? : ");
		amt = sc.nextDouble();
		em.upSalary(amt);

	}
}