desc : 테이블 들어가기


insert into 테이블명 values : 원하는 테이블에 값 넣기

-------------------------------------------------------------------------------------

-- 출력 조정 명령 (column 이용)  : 접속 했을 때 다시 명령을 해야함


-- 문자는 a, 숫자는 9

set linesize 250;
set pagesize 30;


-- dept
col deptno format 99  
col dname foramt a13	
col loc	format  a11 	


-- emp

col empno format 99999
col ename format a10
col job format a10
col mgr format 99999
col hiredate format a10
col sal format 999999
col comm format 999999
col age format 999


-- salgrade

col grade format 99999

col losal format 99999

col hisal format 99999

-------------------------------------------------------------------------------

select : 특정 열 출력


-- 특정 열 출력

select ename , job
from emp;


-- 전체 열 출력

select * from emp; 

--------------------------------------------------------------------------------

distinct : 중복데이터 삭제


-- 중복 제거하고 사원넘버 출력하기

select distinct deptno
from emp;

select distinct job from emp;

-------------------------------------------------------------------------------------

insert into salgrade values
(1, 700, 1200);
insert into salgrade values
(2, 1201, 1400);
insert into salgrade values
(3, 1401, 2000);
insert into salgrade values
(4, 2001, 3000);

commit;

-------------------------------------------------------------------------------------------

-- emp 전체 행 삭제

delete from emp;


insert into emp values
(7369, 'SMITH', 'CLERK',     7902,  '1980/12/17',  800, null, 20);
insert into emp values
(7499, 'ALLEN',  'SALESMAN', 7698,  '1981-2-20',  1600, 300,  10);
insert into emp values
(7521, 'WARD',   'SALESMAN', 7698,  '1981-2-22',  1259, 500,  30);
insert into emp values
(7566, 'JONES',  'MANAGER',  7839,  '1981-4-02',  2975, null, 20);
insert into emp values
(7654, 'MARTIN', 'SALESMAN', 7698,  '1981-9-28',  1250, 1400, 30);
insert into emp values
(7698, 'BLAKE',  'MANAGER',  7839,  '1981-05-01',  2850, null, 30);
insert into emp values
(7782, 'CLARK',  'MANAGER',  7839,  '1981-06-09',  2450, null, 10);
insert into emp values
(7788, 'SCOTT',  'ANALYST',  7566,  '1987-04-19',  3000, null, 20);
insert into emp values
(7839, 'KING',   'PRESIDENT', null, '1981-11-17',  5000, null, 10);
insert into emp values
(7844, 'TURNER', 'SALESMAN',  7698, '1981-09-08', 1500,   0 , 30);
insert into emp values
(7876, 'ADAMS',  'CLERK',     7788, '1987-05-23', 1100, null, 20);
insert into emp values
(7900, 'JAMES',  'CLERK',     7698, '1981-12-03',  950, null, 30);
insert into emp values
(7902, 'FORD',   'ANALYST',   7566, '1981-12-03',  3000, null, 20);
insert into emp values
(7934, 'MILLER', 'CLERK',     7782, '1982-01-23',  1300, null, 10);

commit;

-----------------------------------------------------------------------------------------


-- 해당 열 전부 출력

select all job, deptno from emp;


-- 해당 열 중복 제거 후 출력

select distinct job, deptno from emp;


------------------------------------------------------------------------------------------

select ename from emp;


-- ename 의 수입과 연간 총수입 출력

select ename, sal, sal*12+comm
from emp;


-- 별칭(alise)만들기 - annsal : sal*12+comm의 별칭.  방법 4가지 :(annsal / "annsal" / as annsal / as "annsal")

select ename, sal, sal*12+comm annsal
from emp;


---------------------------------------------------------------------------------------------

order by : 정렬하기


-- 급여 오름차순으로 정렬하기 (asc = default. 생략가능)

select * from emp order by sal;


-- 급여 내림차순으로 정렬하기 

select * from emp order by sal desc;


----------------------------------------------------------------------------------------------

where : 특정 조건 만족 시 출력


-- 부서번호가 30인 사원을 출력

select * from emp where deptno =30;


다수의 조건식을 사용하는 and / or 연산자


-- 부서번호가 30번이고 영업사원을 출력

select * from emp where deptno =30 and job = 'salesman' ;   = 테이블에 입력시 대문자로 입력되기 때문에 오류

select * from emp where deptno =30 and job = 'SALESMAN' ; 


다수의 조건식을 사용하는 and / or 연산자


-- 부서번호가 30이거나 직업이 clerk인 사원을 출력

select * from emp where deptno =30 or job = 'CLERK';


-- 연봉이 3600 인 사원을 출력

select * from emp where sal*12 = 36000;


-- 급여가 3000 이상 사원을 출력

select * from emp where sal >=3000;


-- 사원 이름의 첫 문자가 F거나 F보다 뒤쪽의 것만 출력

select * from emp where ename >= 'F';


-- ford는 forz보다 작기때문에 출력

select * from emp where ename <= 'FORZ'; 


-- 급여가 3000이 아닌 사원 출력. ! = 부정 

select * from emp where sal != 3000;


-- 급여가 3000이 아닌 사원 출력. <> = 부정 

select * from emp where sal <> 3000;


-- 급여가 3000이 아닌 사원 출력. ^= = 부정 

select * from emp where sal ^= 3000;


-- 급여가 3000이 아닌 사원 출력. not = 부정

 select * from emp where not sal = 3000;


-- 급여가 3000인 사원 출력.  

select * from emp where sal = 3000;


-- 직업이 manager or salesman or clerk 인 사원 출력

select * from emp where job = 'MANAGER' or job = 'SALESMAN' or job = 'CLERK';


-- 괄호를 통해 다수의 조건식을 만족하는 사원 출력

select * from emp where (job = 'MANAGER' and sal >= 1000) or (job = 'SALESMAN' and sal >= 1500) ;


-------------------------------------------------------------------------------------------------------------

in : 특정 열에 해당하는 조건을 여러개 지정가능

 
-- 직업이 manager or salesman or clerk 인 사원 출력 

select * from emp where job in('MANAGER' , 'SALESMAN', 'CLERK');


-- 직업이  manager and salesman and clerk 이 아닌 사원 출력 

select * from emp where job != 'MANAGER' and job <> 'SALESMAN' and job ^= 'CLERK';


-- 직업이  manager and salesman and clerk 이 아닌 사원 출력 in 사용

select * from emp where job not in('MANAGER' , 'SALESMAN' ,  'CLERK');


sql 은 입력도 table 출력도 table
------------------------------------------------------------------------------------------------------------

between a and b : a 와 b 사이값 구하기


-- 급여가 2000 ~ 3000 사이의 사원 출력

select * from emp where sal>= 2000 and sal <=3000;

select * from emp where sal between 2000 and 3000;


-- 급여가 2000 ~ 3000 사이가 아닌 사원 출력

select * from emp where sal not between 2000 and 3000;


--------------------------------------------------------------------------------------------------------------

like(패턴비교 연산자) : 일부 문자열이 포함된 데이터 조회 (검색 기능)

1. _  :  한 문자.

2. % :  공백을 포함한 모든 문자에 대응


query (쿼리, 질의어) : select 로 원하는 결과 출력
-- 이름이 S로 시작하는 사원 출력 

select * from emp where ename like 'S%';


-- 이름의 마지막 글자가 S인 사원 출력

select * from emp where ename like'%S';


-- 이름에 A가 들어가는 사원 출력

select * from emp where ename like'%A%';



select ename 사원이름 from emp;


----------------------------------------------------------------------------------------------------------------

-- null : 0이 아님. 아직 값이 정해지지 않거나 모를 때 사용

-- comm이 null 인 사원 출력

select * from emp where comm is null;


-- comm이 null이 아닌 사원 출력

select * from emp where comm is not null;


-- mgr이 null 인 사원 출력

select * from emp where mgr is  null;


-- mgr이 null이 아닌 사원 출력

select * from emp where mgr is not  null;


-- 급여가 null이 아니거나 comm이 null인 사원 출력

select * from emp where sal > null or comm is null;


-------------------------------------------------------------------------------------------------------------


-- 집합 연산자 union : 중복을 제거하고 값 출력

select empno, ename, sal, deptno from emp where deptno =10
union select empno, ename, sal, deptno from emp where deptno = 10; 


--  union all : 중복값 허용하고 값 출력 

select empno, ename, sal, deptno from emp where deptno =10
union all select empno, ename, sal, deptno from emp where deptno = 10; 



-- minus : 차집합. 값이 같은 데이터 제외하고 출력

select empno, ename, sal, deptno from emp
minus select empno, ename, sal, deptno from emp where deptno = 10;


-- intersect : 교집합. 값이 같은 데이터만 출력

select empno, ename, sal, deptno from emp
intersect select empno, ename, sal, deptno from emp where deptno = 10;

----------------------------------------------------------------------------------------------------------------
4-
1.  중복제거 select distinct job from emp;

2. select * from emp;

select empno as employee_no, ename as employee_name, mgr as manager, sal as salary, 
comm as commisson, deptno as department_no from emp;

select * from emp order by deptno desc, ename;


5- 
1. select * from emp where ename like'%S';          : 이름이 S로 끝나는

2. select * from emp where deptno = 30 and job = 'SALESMAN';     : 부서번호 30이면서 직업이 세일즈맨인

3. select * from emp where deptno in(20,30) and sal > 2000;     : 부서번호가 20~30이며 급여 2천 이상

select * from emp where deptno in (20,30)
intersect select * from emp where sal > 2000;

select * from emp where deptno = 30 and sal > 2000
union select * from emp where sal > 2000 and deptno = 20;

4.  select * from emp where sal < 2000 or sal > 3000;  : 급여가 2000 ~ 3000 사이가 아닌

5. select * from emp where ename like'%E%' and deptno = 30 intersect
 select * from emp where sal not between 1000 and 2000;   : 이름에 E포함, 부서번호 30, 급여 1000 ~ 2000 x

6. select * from emp where comm is null and mgr is not null and job in ('MANAGER','CLERK')
and ename not like'_L%';                  : 추가수당 x 상급자 o 직책 매니저 or 클럭 이름 두번째 글짜 L이 아닌
-----------------------------------------------------------------------------------------------------------------

update 테이블
set 필드명 = 값
where 조건 ;  (where 가 없을 경우 전체 변경)

-- update : 필드값을 변경할 때 사용

update emp set deptno = 30 where ename = 'ALLEN';


-- emp에 age 추가 : alter 사용

alter table emp add age number;


-- age값 30으로 전체 변경
update emp set age = 30; : 전체 나이 30으로 변경



-- 필드 삭제

alter table emp drop column 필드명;

alter table emp drop column age;
-----------------------------------------------------------------------------------------------------------------

0127

데이터베이스 언어 

1. DML , DDL, DCL 을 설명하고 예를 쓰시오.
DDL : 데이터베이스 구조 정의
DML : 조작어 (select) DDL의 데이터를 조작
DCL : 컨트롤 (DBA)

조작어는 DDL 내용을 안바꿈.  commit 을 통해 수정

2. 