오라클 함수 

1. 내장 함수 (bulit-in function)

- 단일행 함수

- 다중행 함수

2. 사용자 정의 함수


-----------------------------------------------------------------------------------------------------------

대소문자 변환 함수

upper : 괄호 안 모든 문자 데이터 대문자로 변환

lower : 		"	      소문자

initcap : 괄호 안 모든 문자 데이터 중 첫 글자는 대문자, 나머지는 소문자로 변환


-- 활용

select ename, upper(ename), lower(ename), initcap(ename) from emp;


-- 사원이름이 scott인 데이터 찾기

select * from emp where upper(ename) = upper('scott');


-- 사원이름에 scott이 포함된 데이터 찾기

select * from emp where upper(ename) like upper('scott');


---------------------------------------------------------------------------------------

문자열의 길이를 구하는 length 함수


-- 선택한 열의 문자열 길이 구하기

select ename, length(ename) from emp;


-- 사원 이름의 길이가 5 이상인 행 출력

select ename, length(ename) from emp where length(ename) = 5;


-- length 함수와 lengthb함수 비교하기

select length('한글'), lengthb('한글') from dual;

b : byte

한글은 한 문자당 2byte로 처리

dual : sys가 가지고 있는 테이블(미리 정의된 더미 테이블)

---------------------------------------------------------------------------------------------

문자열의 일부를 추출하는 substr 함수

**오라클은 index가 1부터 시작

-- substr 활용

select job, substr(job, 1, 2), substr(job, 3, 2), substr(job, 5) from emp;
	       1번부터 2글자	            5번부터 끝까지


-- substr - 활용 

select job, substr(job, -length(job)), substr(job, -length(job), 2), substr(job, -3) from emp;
	          -5자리 ~ 끝까지	      -5자리에서 2글자        -3자리 ~ 끝까지


-------------------------------------------------------------------------------------------------

문자열 데이터 안에서 특정 문자의 위치를 찾는 instr 함수


-- 사원 이름에 문자 s가 있는 행 구하기

select * from emp where instr(ename, 'S') > 0;

= like '%S%' 

-----------------------------------------------------------------------------------------------------

특정 문자를 다른 문자로 바꾸는 replace 함수

replace([문자열 데이터 or 열 이름(필수)], [찾는 문자열(필수)], [대체 할 문자(선택)])  - 형식

-- replace 활용

select '010-1234-5678' as replace_before,          
replace('010-1234-5678', '-' , ' ') as replace_1,     
replace('010-1234-5678', '-' ) as replace_2 
from dual;

--------------------------------------------------------------------------------------------------------

데이터의 빈 공간을 특정 문자로 채우는 pad 함수


lpad([문자열 데이터 or 열이름(필수)], [데이터의 자릿수(필수)], [빈 공간에 채울 문자(선택)])

rpad([문자열 데이터 or 열이름(필수)], [데이터의 자릿수(필수)], [빈 공간에 채울 문자(선택)])


-- pad 활용

select 'Oracle', lpad('Oracle', 10, '#') as lpad_1,
	       rpad('Oracle', 10, '*') as rpad_1,
	       lpad('Oracle', 10) as lpad_2,
	       rpad('Oracle', 10) as rpad_2 
from dual;

1 : 10자리의 데이터에서 빈공간을 왼쪽에 #으로 채워라
2 :                                       오른쪽에 *로 채워라


-- 개인정보 뒷자리 *표시로 출력

select rpad('971225-' , 14, '*') as rpad_jmno,
        rpad('010-1234-', 13, '*') as rpad_phone
from dual;

-----------------------------------------------------------------------------------------------------------

두 문자열 데이터를 합치는 concat 함수


-- 두 열 사이에 콜론 넣고 연결하기

select concat(empno, ename),
        concat(empno, concat(' : ', ename))
from emp where ename = 'SCOTT' ;

-------------------------------------------------------------------------------------------------------------

특정 문자를 지우는 trim 함수

trim([삭제 옵션(선택)] , [삭제할 문자(선택)] , from [원본 문자열 데이터(필수)])


-- 공백 제거하고 출력

select '[' || trim(' _ _Oracle_ _ ') || ']' as trim,
        '[' || trim(leading '_' from ' _ _Oracle_ _ ') || ']' as trim_leading,
        '[' || trim(trailing '_' from ' _ _Oracle_ _ ') || ']' as trim_trailing,
        '[' || trim(both from ' _ _Oracle_ _ ') || ']' as trim_both
from dual;


-- 삭제할 문자 _삭제 후 출력

select '[' || trim('_' from '_ _Oracle_ _') || ']' as trim,
        '[' || trim(leading '_' from '_ _Oracle_ _') || ']' as trim_leading,
        '[' || trim(trailing '_' from '_ _Oracle_ _') || ']' as trim_trailing,
        '[' || trim(both '_' from '_ _Oracle_ _') || ']' as trim_both
from dual;


1 : 기본
2 : 왼쪽에 있는 글자 지우는 leading
3 : 오른쪽에 있는 글자 지우는 trailing
4 : 양쪽 글자를 모두 지우는 both

---------------------------------------------------------------------------------------------------

특정 위치에서 반올림하는 round 함수

- round ([숫자(필수)], [반올림 위치(선택)]) 

특정 위치에서 버리는 trunc 함수

- trunc ([숫자(필수)], [버림 위치(선택)]) 

지정 숫자와 가까운 정수를 찾는 ceil, floor 함수

- ceil([숫자(필수)])
천장
- floor([숫자(필수)])
바닥

숫자를 나눈 나머지 값을 구하는 mod 함수


-- 반올림 된 숫자 출력

select round(1234.5678) as round,
        round(1234.5678, 0) as round_0,
        round(1234.5678, 1) as round_1,
        round(1234.5678, 2) as round_2,
        round(1234.5678, -1) as round_minus1,
        round(1234.5678, -2) as round_minus2
from dual;

1 : 기본형
2 : 소수점 첫째자리 반올림   -  1234.5 반올림 = 1235 
3 : 소수점 둘째자리 반올림   -  1234.56 반올림 = 1234.6
4 : 소수점 셋째자리 반올림   -  1234.567 반올림 = 1234.57
5 : 자연수 첫째자리 반올림   -  1234 반올림 = 1230
6 : 자연수 둘째자리 반올림   -  1234 에서 3,4, 반올림 = 1200 


-- 버리는 숫자 출력

select trunc(1234.5678) as trunc,
	trunc(1234.5678, 0) as trunc_0,
	trunc(1234.5678, 1) as trunc_1,
	trunc(1234.5678, 2) as trunc_2,
	trunc(1234.5678, -1) as trunc_minus1,
	trunc(1234.5678, -2) as trunc_minus2
from dual;

-----------------------------------------------------------------------------------------------------

날짜 데이터를 다루는 날짜 함수

sysdate : 현재 날짜와 시간


-- sysdate 사용하여 날짜 출력

select sysdate as now,
	sysdate-1 as yesterday,
	sysdate+1 as tomorrow
from dual;


-- 현재로 3개월후 출력

select sysdate, add_months(sysdate, 3)
from dual;

add_months([날짜 데이터(필수)], [더할 개월 수(필수)])


-- 입사 10주년이 되는 사원 데이터 출력

select empno, ename, hiredate, add_months(hiredate, 120) as work10year
from emp;

---------------------------------------------------------------------------------------------------------------

** 자료형을 반환하는 형 변환 함수

to_char : 숫자 또는 날짜 데이터를 문자 데이터로 변환

- to_char([날짜데이터(필수)], ' [출력을 원하는 문자 형태(필수)] ' )


to_number : 문자 데이터를 숫자 데이터로 변환

- to_number(' [문자열 데이터(필수)] ' , ' [인식될 숫자형태(필수)] ' )


to_date : 문자 데이터를 날짜 데이터로 변환

- to_date(' [문자열 데이터(필수)] ' , ' [인식될 날짜형태(필수)] ' )



-- 숫자와 문자열을 더하여 출력

select empno, ename, empno + '500' from emp where ename = 'SCOTT';


-- 날짜 형식 지정하여 출력

select to_char(sysdate, 'yyyy/mm/dd hh24:mi:ss') as 현재날짜시간
from dual;


-- 월과 요일 출력하기

select sysdate,
	to_char(sysdate, 'mm') as mm,
	to_char(sysdate, 'mon') as mon,
	to_char(sysdate, 'month') as month,
	to_char(sysdate, 'dd') as dd,
	to_char(sysdate, 'dy') as dy,
	to_char(sysdate, 'day') as day
from dual;


-- 시간 형식 지정하여 출력

select sysdate,
	to_char(sysdate, 'hh24:mi:ss') as hh24miss,
	to_char(sysdate, 'hh12:mi:ss am') as hh24miss_am,
	to_char(sysdate, 'hh:mi:ss p.m.') as hh24miss_pm
from dual;


-- 숫자 형식을 사용하여 급여출력

select sal,
	to_char(sal, '$999,999') as sal_$,
	to_char(sal, 'L999,999') as sal_L,
	to_char(sal, '999,999.00') as sal_1,
	to_char(sal, '$000,999,999.00') as sal_2,
	to_char(sal, '$000999999.99') as sal_3,
	to_char(sal, '$999,999,00') as sal_4$
from emp;


-- to_number 활용

select to_number('1,300' , '999,999') - to_number('1,500' , '999,999')
from dual;


-- 문자 데이터 날짜로 변환

select to_date('2018-07-14', 'yyyy-mm-dd') as todate1,
        to_date('20180714', 'yyyy-mm-dd') as todate2
from dual;


-- 1981년 6월 1일 이후 입사한 사원 출력

select * from emp where hiredate > to_date('1981/06/01', 'yyyy/mm/dd');

-------------------------------------------------------------------------------------------------------------

null 처리 함수

nvl : null이 아니면 그대로, null이면 지정한 값 출력

- nvl([null인지 여부를 검사할 데이터 or 열(필수)], [앞의 데이터가 null일 경우 반환할 데이터(필수)])

nvl2 : null이 아닐때와 null일때 각각 지정한 값 출력

- nvl2([null인지 여부를 검사할 데이터 or 열(필수)], 
  [앞의 데이터가 null이 아닐 경우 반환할 데이터 or 계산식(필수)]),  
  [앞의 데이터가 null일 경우 반환할 데이터 or 계산식(필수)]


-- nvl 활용

select empno, ename, sal, comm, sal+comm, nvl(comm,0), sal+nvl(comm, 0)
from emp;


-- nvl2 활용

select empno, ename, comm,
nvl2(comm, '0' , 'x'),
nvl2(comm, sal*12+comm, sal*12) as annsal
from emp;

---------------------------------------------------------------------------------------------------------------

상황에 따라 다른 데이터를 반환하는 decode 함수 , case 함수

decode([검사 대상이 될 열 or 데이터, 연산이나 함수의 결과],
	[조건1], [데이터가 조건1과 일치하면 반환할 결과],
	[조건2], [데이터가 조건2과 일치하면 반환할 결과],
	[위 조건들과 일치한 경우가 없을때 반환할 결과] )

-- decode 활용

select empno, ename, job, sal,
decode(job , 'manager' , sal*1.1,
	     'salesman' , sal*1.05,
	     'analist' , sal, sal*1.03) as upsal
from emp;

------------------------------------------------------------------------------------------------------------------

case [검사 대상이 될 열 or 데이터, 연산이나 함수의 결과(선택)] 
when [조건1] then [조건1의 결과 값이 true일 때 반환할 결과]
when [조건2] then [조건2의 결과 값이 true일 때 반환할 결과]
else [위 조건들과 일치하는 경우가 없을 때 반환할 결과]
end


-- case 활용

select empno, ename, job, sal,
case job
when 'manager' then sal*1.1
when 'salesman' then sal*1.05
when 'analist' then sal
else sal*1.03
end as upsal
from emp;


-- 열 값에 따라 출력 값이 달라지는 case문

select empno, ename, comm,
case
when comm is null then '해당사항 없음'
when comm = 0 then '수당없음'
when comm > 0 then '수당 : ' ||comm
end as comm_text
from emp;

--------------------------------------------------------------------------------------------------------------------

-- 사원번호 뒤의 두자리 *로 출력

select rpad(substr(empno, 1, 2), 4, '*')
from emp;


-- 

select empno, ename, to_char( hiredate,'yyyy-mm-dd'), 
comm, to_char(add_months(hiredate, 3), 'yyyy-mm-dd') as r_job,
nvl(to_char(comm), 'N/A') from emp;


--------------------------------------------------------------------------------------------------------------------

하나의 열에 출력 결과를 담는 다중행 함수

sum : 합계

count : 데이터 개수

max : 최댓값

min : 최솟값

avg : 평균값


-- 사원 이름과 급여 합계 출력

select ename, sum(sal) from emp; : 오류


-- 급여 합계 구하기

select sum(distinct sal),
	sum(all sal),
	sum(sal)
from emp;

--------------------------------------------------------------------------------------------------------------------

-- 테이블의 데이터 개수 출력

select count(*) from emp;

select count(empno) from emp;


-- 부서번호가 30번인 사람 수 구하기

select count(*) from emp where deptno = 30;


-- 직업 개수 구하기

select count(distinct job),
	count(all job),
	count(job)
from emp;


-- 추가수당 열 개수 출력

select count(comm) from emp where comm is not null;

-------------------------------------------------------------------------------------------------------------------

-- 부서 번호가 10인 사람중 최대 급여 출력

select max(sal) from emp where deptno = 10;


-- 부서 번호가 10인 사람들의 평균 급여 출력

select avg(sal) from emp where deptno = 10;

------------------------------------------------------------------------------------------------------------------------

결과 값을 원하는 열로 묶어 출력하는 group by 절


-- 부서별 평균 급여 출력하기

select avg(sal), deptno from emp group by deptno;


-- 부서 번호 및 직책별 평균 급여 출력

select deptno, job, avg(sal) from emp
group by deptno, job
order by deptno, job;

-----------------------------------------------------------------------------------------------------------------

group by절에 조건을 주는 having 절


-- 활용

select deptno, job, avg(sal) from emp
group by deptno, job 
having avg(sal) >= 2000
order by deptno, job;

where 절은 집계 함수를 쓸 수 없다

having 절 사용해야함 (if문의 조건식)

--------------------------------------------------------------------------------------------------------------

rollup, cube, grouping sets 함수


-- rollup 활용

select deptno, job, count(*), max(sal), sum(sal), avg(sal) from emp
group by rollup(deptno, job);


-- cube 활용

select deptno, job, count(*), max(sal), sum(sal), avg(sal) from emp
group by cube(deptno, job)
order by deptno, job;


-- 그룹화 후 rollup함수에 job 저장

select deptno, job, count(*) from emp
group by deptno, rollup(job);


-- job을 그룹화 후 rollup에 deptno 저장

select deptno, job, count(*) from emp
group by job, rollup(deptno);


-- grouping sets로 열별로 그룹으로 묶어 출력

select deptno, job, count(*) from emp
group by grouping sets(deptno, job)
order by deptno, job;


-- 그룹화 결과 여부를 grouping 함수로 확인

select deptno, job, count(*), max(sal), sum(sal) , avg(sal), grouping(deptno), grouping(job)
from emp
group by cube(deptno, job)
order by deptno, job;

0 : 그룹화 됨
1 : 그룹화 되지 않음

-------------------------------------------------------------------------------------------------------------

listagg within 함수 : 가로로 출력

-- 부서별 사원 이름을 나란히 나열하여 출력

select deptno, listagg(ename, ', ')
	within group(order by sal desc) as enams from emp
	group by deptno;

--------------------------------------------------------------------------------------------------------------

pivot, unpivot 함수

pivot : 기존 테이블 행을 열로 바꾼다

unpivot : 기존 테이블 열을 행으로 바꿔서 출력


-- 부서별 직책별로 그룹화하여 최고 급여 출력

select deptno, job, max(sal) from emp
group by deptno, job
order by deptno, job;


-- pivot 적용하여 직책별 부서별 최고 급여를 2차원 표 형태로 출력

select * from (select deptno, job, sal from emp)
pivot(max(sal) for deptno in (10, 20, 30))
order by job;

select * from(select ...) : 서브 쿼리


-- pivot 함수를 통해 부서별 직책별 최고 급여를 2차원 표 형태로 출력

select * 
from
(select job, deptno, sal from emp)
pivot(max(sal)
for job in('CLERK' as clerk,
	'SALESMAN' as salesman,
	'PRESIDENT' as president,
	'MANAGER' as manager,
	'ANALYST' as analyst))
order by deptno;


-- UNPIVOT함수를 사용하여 열로 구분된 그룹을 행으로 출력

SELECT * 
FROM(SELECT DEPTNO,
		MAX(DECODE(JOB, 'CLERK'        , SAL)) AS "CLERK" ,
		MAX(DECODE(JOB, 'SALESMAN'        , SAL)) AS "SALESMAN" ,
		MAX(DECODE(JOB, 'PRESIDENT'        , SAL)) AS "PRESIDENT" ,
		MAX(DECODE(JOB, 'MANAGER'        , SAL)) AS "MANAGER" ,
		MAX(DECODE(JOB, 'ANALYST'        , SAL)) AS "ANALYST" 
FROM EMP
GROUP BY DEPTNO
ORDER BY DEPTNO)
UNPIVOT(
	SAL FOR JOB IN (CLERK, SALESMAN, PRESIDENT, MANAGER, ANALYST))
ORDER BY DEPTNO, JOB;

----------------------------------------------------------------------------------------------------------------

1. trunc , group by 
select deptno, 
trunc(avg(sal), 0)as avg_sal,
max(sal) as max_sal,
min(sal)as min_sal,
count(sal) as cnt
from emp
group by deptno;


2. having

select job , count(*) from emp
group by job
having count(*) >= 3;

5. to_char(), rollup()

select deptno,
	to_char(hiredate, 'yyyy') as hire_year,
	count(*) as cnt,
	max(sal) as max_sal,
	sum(sal) as sum_sal,
	avg(sal) as avg_sal
   from emp
group by rollup(deptno, to_char(hiredate, 'yyyy'));

-------------------------------------------------------------------------------------------------------------------
서브쿼리(SubQuery) : select절에 포함된 또 다른 select 문장

알려지지 않은 데이터의 값을 검색하기 위해 사용

select 컬럼명
from 테이블명
where 수식 연산자 (select 컬럼명
 from 테이블명); - 서브쿼리는 order by절을 포함할 수 없다. - order by절은 메인 쿼리문(주 select)의 마지막에 위치한다. - 괄호안의 select 문장인 서브쿼리가 먼저 실행되어 메인 쿼리문장의 조건으로 전달되어 
결과를 구한다. 


-- jones 과 같은 부서에서 근무하는 사원들의 부서번호, 사원번호, 이름, 급여를 구하시오

select deptno, empno, ename, sal
from emp
where deptno = (select deptno
		from emp
		where ename = 'JONES');

하나의 select문씩 확인하면서 진행


-- jones과 같은 직무를 가진 사원들의 이름과 직무를 구하라

select ename, job
from emp
where job = (select job from emp
	     where upper(ename) = 'JONES');


-- 'CLARK' 보다 급여를 많이 받는 사원의 이름, 직무를 출력

select ename, job
from emp
where sal <
(select  sal
from emp
where ename = 'CLARK');


--  사원 전체의 평균 급여보다 급여가 적은 사원들의 이름과 급여를 구하여라.

select ename , sal
from emp
where sal <
(select avg(sal)
from emp);


-- emp 테이블에서 부서별로 평균급여가 부서번호 30인 사원들의 평균급여보다 큰 부서
의 부서번호와 평균 급여를 구하여라.

select deptno, avg(sal)
from emp
group by deptno
having avg(sal) >
	(select avg(sal) from emp
	where deptno = 30);

------------------------------------------------------------------------------------------------------------

서브쿼리인 select 문장으로부터 여러 개의 값을 결과로 산출한다.
 
복수행 연산자(in, not in, any, all)을 사용 

메인 쿼리의 비교 조건이 서브쿼리의 결과중에서 하나라도 일치하면 참이 된다.

-- 부서별로 제일 먼저 나오는 사원 이름을 출력


select ename, sal, deptno
from emp
where ename in
(select min(ename) from emp
group by deptno);

= : 단일행 서브쿼리 연산자 

in : 복수행 서브쿼리 연산자 (서브쿼리의 결과가 여러 행일 때 사용)

----------------------------------------------------------------------------------------------------------------

서브쿼리가 반환하는 각각의 값과 비교하여 하나라도 만족되면 결과에 포함. 

< any는 최대값보다 작음을 나타내고
> any는 최소값보다 큼을 나타내고
= any는 in과 동일한 역할을 한다. 


-- 부서번호가 30인 사원들의 급여 중 가장 낮은 값보다 높은 급여를 받는 사원의 이름, 급여를 구하시오

select ename, sal
from emp
where sal > any
(select sal from emp
where deptno = 30);

서브쿼리에 있는 어떤 값보다 작은 값 or 큰값을 반환
한놈만 걸려라
--------------------------------------------------------------------------------------------------------------------

서브쿼리가 반환하는 모든 값과 비교한다.

> all은 최대값보다 큼을 나타내고
< all은 최소값보다 작음을 나타낸다. 


-- 부서번호가 30번인 사원들의 급여 중 가장 높은 값보다 더 많은 급여를 받는 사원의 이름, 급여를 구하세요.

select ename, sal 
from emp
where sal > all
(select sal from emp
where deptno = 30);

서브쿼리에 있는 모든값보다 작은 값 or 큰값을 반환
다 드루와

-------------------------------------------------------------------------------------------------------------------

서브쿼리 문제 5개를 만들어서 결과 도출해내기

함수 5개 만들어서 결과 도출해내기