HTML(구조) + CSS(디자인) + JavaScript -> 브라우저, 웹페이지에서 실행


DOM : Document Object Model 


-- 웹 브라우저 대화상자 

1. alert : 가장 기본적인 웹 브라우저 대화상자

	alert("Welcome!");


2. confirm : 사용자의 선택을 요청 -> 반환값은 boolean

	let choice = confirm("Ready to go?");
	console.log(choice);

3. prompt : 사용자의 입력 값을 받음 -> 취소시 null

	let name = prompt("What is you name?");


HTML -> style : 반드시 head 안에 들어가야함
	scrpit : 어디에서든 들어갈 수 있음



-- scrpit 태그 : HTML 문서 안에 JavaScript를 삽입

	script 태그는 HTML 문서 어디에서든 사용할 수 있음
 
	script 태그는 한 문서 안에 여러 개를 사용해도 상관 없음

	script 태그가 삽입된 위치에서 소스가 실행(순차 실행)

	script 태그의 src 속성을 이용, JavaScript 소스 파일 위치를 지정


-- id 와 class 속성 -> 공통속성

	 id와 class는 모든 태그가 가질 수 있는 공통 속성

	 id: 페이지 내 유일한 요소 식별 값(페이지 내 유일해야 함)
	
	class: 페이지 내 동일 클래스를 가진 요소가 여럿 있을 수 있으며, 
	       한 요소가 여러 클래스를 가질 수도 있음

	<div id='bottom-lettuce' class='burger-component'></div>



-- document 객체 : 웹 문서(HTML) 자체를 가리키는 DOM 요소

	console.log(document.__proto__); // HTMLDocument


	 모든 자식 노드의 확인

	console.log(document.children); // HTMLCollection


	개별 자식 노드의 확인

	console.log(document.childElementCount)
	
	console.log(document.children[0]); // HTML Element


	document에 내용 출력: document.write()

	document.write("Welcome!");



document 객체를 이용, DOM 요소에 접근할 수 있음

	태그명을 이용한 DOM 요소 접근 : .getElementsByTagName()

	id 속성을 이용한 DOM 요소 접근 : .getElementById()

	class 속성을 이용한 DOM 요소 접근 : .getElementsByClassName()

	Selector를 이용한 DOM 요소 탐색 : .querySelector(), .querySelectorAll()

	.querySelector() 메서드는 셀렉터 조건을 만족하는 첫 번째 HTMLElement를 반환
 
	.querySelectorAll() 메서드는 셀렉터 조건을 만족하는 HTMLCollection을 반환



-- 태그 속성의 제어 :  getAttribute(선택), setAttribute(제어)

	let obj = DOM 요소 접근( getElementsbyid() ); -> obj.setAttribute();



-- 이벤트 리스너  :  Event가 발생했을 때 처리할 함수로 연결해주는 것

	Event : 웹 브라우저나 사용자가 행하는 어떤 동작.

	click 사용자가 요소를 마우스로 클릭했을 때

	dblclick 사용자가 요소를 마우스로 두 번 클릭했을 때


-- 마우스 이벤트

	mousedown 사용자가 요소를 마우스 버튼을 누를 때
	
	mousemove 사용자가 요소 위에서 마우스 포인터를 움직일 때

	mouseover 마우스 포인터가 요소 위로 올라올 때
	
	mouseout 마우스 포인터가 요소 밖으로 벗어날 때

	mouseup 사용자가 누르고 있던 마우스 버튼에서 손을 뗄 때


-- 키보드 이벤트

	keypress 사용자가 키보드를 누를 때

	keydown 사용자가 키보드를 눌렀을 때(누른 상태)

	keyup 사용자가 키보드를 눌렀다 뗄 때(해제)


-- 문서 로딩 이벤트

	abort 웹 문서가 완전히 로딩되기 전, 불러오기를 멈췄을 때

	error 문서가 정확히 로딩되지 않았을 때

	load 문서 로딩이 완료되었을 때. 주로 초기화 작업에 활용
	
	resize 문서 화면 크기가 바뀌었을 때

	scroll 문서 화면에 스크롤이 발생했을 때

	unload 문서를 벗어날 때


-- 폼 이벤트 : 폼 입력 양식에서 발생하는 이벤트

	blur 폼 요소가 포커스를 잃었을 때

	change 목록, 체크 상태 등이 변경되었을 때

	focus 폼 요소에 포커스가 놓였을 때(입력 가능 상태)

	reset 폼이 리셋되었을 때

	submit submit 버튼을 눌렀을 때



-- 동적으로 스타일 변경

	HTMLElement의 style 객체를 이용하면 동적으로 요소의 스타일을 추가, 변경할 수 있다

 단, CSS의 속성명과 JavaScript DOM style 객체의 변수명은 다를 수 있다(JavaScript 변수 명명 규칙)



-- 동적으로 요소 생성 

	DOM에 새로운 노드 추가하기
	
		STEP 1. createElement로 새로운 요소 만들기
		
		STEP 2. 새 요소에 속성과 내용 설정
		
		STEP 3. 부모 요소에 Child로 추가(.appendChild



-- 동적으로 요소 삭제

	DOM에서 기존 요소 삭제하기
 
	parent에서 .removeChild() 메서드로 child 삭제



-- 동적으로 요소 검사

	.hasChildNodes() : 자식 노드가 있는지 확인



-- 동적으로 요소 추가

	insertBefore() : 
 
	부모 노드에 자식 노드를 추가할 때 기준이 되는 노드를 지정하고 그 앞에 자식 노드를 추가


------------------------------------------------------------------------------------------------------


jQuery : 