
위치 속성 : 웹 프론트엔드 개발시 요소의 위치를 결정

	절대 위치 좌표 : 요소의 x,y좌표를 설정 - 절대 좌표를 지정

	상대 위치 좌표 : 요소를 입력한 순서 혹은 요소의 포함 관계에 의해 위치를 지정


position 속성 : HTML 요소의 위치 설정 방법을 변경하는 속성

	static : 상대 위치/좌표 설정 (기본값)

	relative : 초기 위치에서 상하좌우로 이동


	absolute : 절대 위치/좌표 설정 (페이지 기준)
		
		left / right / top / bottom

		자손의 position 속성에 absolute 키워드르 적용하려면 조상 요소에 height 필요

		+ 조상의 positon 속성에 relative 키워드 적용

		overflow 속성 : 내부 요소가 조상의 범위를 벗어날 때 처리법
			
			hidden : 벗어나는 부분 감춤

			scroll : 스크롤 처리


	fixed : 고정 위치(화면 자체 기준)


--------------------------------------------------------------------------------------------------

JavaScript : 

	ECMAScript2015 (ES6) : 2015년에 기능향상을 통해 많이 쓰임. 이걸로 불림


https://nodejs.org/en/ 다운

cmd - node 입력

vscode 재 실행 - 터미널 - npm install -g nodemon 설치

Console 객체 : 	console.error("에러 메시지");
		console.warn("경고 메시지");
		console.debug("디버그 메시지");
		console.log("일반 로그 메시지");
		console.info("정보 메시지")

01-basic.js 파일 생성 - 입력 {

//  JavaScript 한줄 주석

/* 여러줄 주석 */

// 전역 객체 console
console.info("정보 메시지");
console.log("일반 로그 메시지");
console.warn("경고 메시지");
console.error("에러 메시지");
	}

터미널 - node 01-basic.js 입력


-- JavaScript 구문 작성

1. 세미콜론은 필수요소가 아님 (해주는게 좋음)

2. // : 한줄주석	/* */ : 여러줄 주석

3. 명령 규칙 : Java와 마찬가지로 CamelCase가 기본

4. 객체지향 x 객체 기반 -> 객체의 속성, 메서드에 접근할 때는 .으로 접근

5. 객체는 property (데이터)와 method(실행 명령)로 이루어짐


var : ES6 이전 JavaScript에서 사용하던 변수 할당 키워드 (문제가 많음)

let / const : ES6이상의 환경에서 활용


let : mutable (변경 가능) -> 변수에 재 할당이 가능

const : immutable(변경 불가) -> 변수에 재 할당 불가(상수로 사용 가능), 선언과 할당을 동시에 해야함


변수 이름 명명 규칙 : 알파벳 , 숫자, 밑줄, 달러기호 사용가능 (숫자로 시작 불가)

변수의 데이터 타입은 선언시 지정 x 할당과 함께 결정됨 (확인 해줘야 함)

	typeof : 변수에 담긴 데이터 타입 확인 키워드

	let v = "This is String";
	console.log("v is", typeof v);
	v = 2018;
	console.log("v is", typeof v)


JavaScript의 기본 데이터타입 : Number, String, Boolean
	

터미널 - 기본 프로필 - nodemon 01-basic.js


-- Number 타입

기본적으로 산술 연산 가능

Literal : 소스코드에 고정된 값

Math 내장 객체를 이용하여 수학 함수를 이용한 결과값을 받을 때 활용
	
	round : 반올림

	floor : 버림


데이터 형 변환 : parseInt() , parseFloat() 사용하면 Number형으로 변환 가능

숫자로 변환할 수 없는 형태의 문자열을 형변환 할 경우, NaN(Not a Number)를 반환

수치형 데이터가 NaN인지 확인하려면 isNaN() 내장 객체 함수를 이용


-- infinity : 산술 연산 결과가 무한대임을 표시하는 표현식

	양의 무한대 : infinity

	음의 무한대 : -infinity


-- String type 

JavaScript의 문자열은 유니코드 문자들의 연결구조 = 문자 하나하나가 연결되어 하나의 표현을 이룸

	property : length

	자동 형변환 : String과 다른 타입을 합칠 때 자동으로 String으로 변환

문자열 추출

	charAt(index)	: 문자열 내 특정 인덱스의 문자 추출
	
	substr(from, length) : 문자열 내의 from인덱스 부터 length 길이만큼 추출 (사용 안함)

	substring(from, end) : 문자열 내의 from인덱스 부터 end인덱스까지 추출 

문자열 검색

	indexOf(searchString[, position] : 문자열 내 position 인덱스부터 searchString을 검색
				      해당 인덱스를 반환
				      검색 문자열이 없으면 -1 반환

				      뒤에서부터 검색 : lastindexOf() 메소드 사용

문자열 치환
	
	replace(searchValue, replaceValue) : 문자열 내 search를 replace로 대체
				         원본은 변경 x

공백 제거 
	trim() : 문자열의 시작과 끝의 빈 문자 제거
	

-- Boolean 타입 :  논리값 true/false를 반환하는 데이터 타입 (프로그램의 흐름 제어)

	== : 타인과 상관 없이 값을 비교

	=== : 값고 함께 타입도 함께 비교 (되도록 이거 사용)


-- null과 undefined : null = 값이 없음 / undefined = 할당이 이루지지 않음(초기화 x)



-- 조건문

	if ~ else if ~ else : 자바와 비슷함
	
	let num = 3;
	if (num > 0) {
	console.log("양수입니다.");
	} else if (num < 0) {
	console.log("음수입니다.");
	} else {
	console.log("0입니다.");
	}


	switch 

	let grade = "C";
	switch (grade) {
	case "A":
	case "B":
	case "C":
	case "D":
	console.log("Pass");
	break;
	case "F":
	console.log("Fail");
	break
	default:
	console.log("?");
	}

	
-- 반복문

	for (let i = 0; i < 10; i++) {
	if (i % 2 == 0) console.log(i);
	}


-- 함수 

	함수 선언 : function

	function sum(a, b) { // 선언
	return a + b;
	}
	console.log(sum(3, 7)); // 사용
