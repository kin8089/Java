-- 함수

JavaScript의 함수는 전혀 별개의 문법적 기능이 아니라 Number, String 등과 동등한 객체이다.

함수에 Number, String 등을 전달할 수 있는 것처럼 매개변수로 함수 자체도 전달할 수 있다

다른 코드의 인수로 넘겨주는 실행 가능한 코드를 콜백(Callback)이라 함

	function sandBox(val1, val2, func) {
	if (typeof func == "function")
	func(val1, val2);
	}
	sandBox(3, 4, function(v1, v2) {
	console.log(v1 + v2);
	});


-- 객체 :  정보를 관리하기 위해 의미를 부여하고 분류하는 논리적 단위

	객체는 속성(attributes)을 가지고 있으며 속성은 다음과 같이 분류된다
 	
	Property : 객체가 관리하는 정보
	 
	Method : 객체가 수행할 수 있는 기능 (객체가 가지고 있는 함수)


-- JSON(JavaScript Object Notation) ** (데이터 형식으로 많이 쓰임)

	JavaScript에서 객체를 표기하기 위한 표기법
 
	어떤 객체이던 표기할 수 있고 바로 생성 가능

	KEY:VALUE 의 쌍으로 어트리뷰트 구성 (콤마(,) 사용에 유의)



-- 객체 상속 

	JavaScript는 객체 지향이 아니라 객체 기반 언어

	 prototype 기반의 상속을 이용, 객체지향의 특성을 구현할 수 있다(속성 공유)


-- Binding : call, apply, bind


-- Array : 하나의 변수에 여러 개의 값을 저장하기 위한 JavaScript의 내장 객체

	JavaScript의 Array는 인덱스의 범위를 엄격하게 체크하지 않으며
	C 계열의 배열에 비해 다양한 방식으로 작동


주요 메소드

	concat(array1, ...) 여러 배열을 하나로 연결

	join(str) 배열 내의 객체들을 str 구분자를 가지는 하나의 문자열로 변환

	pop() 배열의 맨 마지막 객체를 추출(추출된 객체는 삭제)

	push(item1, ...) 배열의 맨 마지막에 객체들을 추가
	
	reverse() 배열의 순서를 뒤집음

	shift() 배열의 맨 처음 객체를 추출(추출된 객체는 삭제)

	slice() 배열의 일부분만을 추출하여 새 배열을 만듦

	sort(function) 배열을 정렬


splice(start[, count]) : 원하는 index 위치의 요소를 삭제하거나 추가
		
		   인수가 한 개일 경우 : 해당 인덱스부터 끝까지 요소를 반환 후 제거

		   인수가 세 개 이상 : 첫 번째 인수 인덱스부터 두 번째 인수 개수만큼 반환 후 제거,
				   제거된 위치에 세 번째 이후 인수를 새로운 요소로 추가



-- Date : 내장 객체

	Date 객체를 생성하는 다양한 생성자
	
	Date(year, month, day) // month는 0부터 시작하니 주의하자
	
	Date(yyyy, mm, dd, hh, mi, ss)
	
	Date(milliseconds)

-- Date 내장 메서드

	getYear() / setYear() : 년도(기준 1900년)

	getMonth() / setMonth() : 월 (0=1월 ~ 11=12월)

	getDate() / setDate() : 일 (1 ~ 31)

	getDay() / setDay() : 요일(0=일요일 ~ 6=토요일)

	getHours() / setHours() : 시간(0~23)

	getMinutes() / setMinutes() : 분(0~59)

	getSeconds() / setSeconds() : 초(0~59)


-- Class : 기존 자바스크립트는 클래스 표현 식 없이 prototype으로 클래스를 다룸
 
	ES6에서는 클래스 정의 문법으로 클래스를 정의, 사용 가능

		constructor: 생성자

		static : 정적 멤버


-- Array : 배열은 JavaScript에서 가장 활용도가 높은 범용 객체
	 
	 ES6 이전부터 많은 메서드들이 추가되고 확장됨

	 forEach : 배열의 개별 요소들을 추출하여 콜백 함수로 넘겨준다

		var source = ["Banana", "Orange", "Apple", "Mango"];

		source.forEach(item => {
			console.log(item);
			});



	every, some : 특정 조건을 만족하는지 배열 내부 원소를 순회하면서 검사
 		
		     조건에 만족하면 true, 아니면 false

		     배열 내부 원서의 값에 대해 검토가 필요한 경우 사용

		     every : 모든 원소가 조건 만족  true
		     some : 요소 중 일부가 조건 만족  true



	filter : 배열의 요소들을 특정 조건을 기준으로 필터링하여 새로운 배열로 반환
						(필터링 조건 : 콜백 함수)
		var source = [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ];
		var result = source.filter( item => item % 2 == 0 );
	


	map : 배열의 요소들을 콜백함수에 전달하여 새로운 배열을 만듦
 	        
	        배열의 각 요소를 변형하는 역할을 수행

	           	var source = [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ];
		var multiply = source.map(item => item * 2);



	reduce : map이 배열의 각 요소를 변형한다면, reduce는 배열 자체를 변형함
 	           일반적으로 배열을 값 하나로 줄인다
	           Basic Syntax

		callback
 			previousValue : 마지막 콜백에서 반환된 값(누계) or initialValue
			
			currentValue : 현재 처리되고 있는 배열의 요소
			
			currentIndex : 현재 처리되고 있는 요소의 인덱스
			
			array : reduce 호출에 사용되는 원 배열


		var arr = [12, 4, 19, 33, 86];
		var sum = arr.reduce( (acc, value, idx, arr) => {
		console.log(`누산 값은 ${acc}`);
		console.log(`${arr}의 ${idx}번째 요소는 ${value}`);
		return acc + value;
		}, 0);
		console.log(sum);


-- 전개 연산자 : 나열형 자료를 추출하거나 연결할 때 사용
	
	사용법: 배열이나 객체, 변수명 앞에 ...를 입력

	제약: 배열, 객체, 함수 인자 표현식([], {}, ()) 안에서만 활용 가능

	const arr1 = ['홍길동','장길산'];
	const arr2 = ['임꺽정','전우치'];

	const combined = [...arr1, ...arr2];
	console.log("ES6 combine:", combined);


배열의 전개 1

	var [ first, second, third = "empty", ...others ] = arr1;
	console.log(first, second, third, others);
	// "홍길동" "장길산" empty []


배열의 전개 2

	var [ first, second, third = "empty", ...others ] = combined;
	console.log(first, second, third, others);
	// 홍길동 장길산 임꺽정 [ '전우치' ]
	

객체 전개 연산 : 객체의 키나 값을 추출할 때 활용 가능

	var obj1 = { one: 1, two: 2, other: 0 };
	var obj2 = { three: 3, four: 4, other: -1};
	var combined = {
	...obj1, // obj1의 모든 속성을 전개
	...obj2, // obj2의 모든 속성을 전개
	}
	console.log(combined);
	// { one: 1, two: 2, other: -1, three: 3, four: 4 }
